{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSelectedLog = exports.useLogs = exports.LogContext = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar LogBoxLog_1 = require(\"./LogBoxLog\");\nexports.LogContext = react_1.default.createContext(null);\nfunction useLogs() {\n  var logs = react_1.default.useContext(exports.LogContext);\n  if (!logs) {\n    if (react_native_1.Platform.OS === \"web\" && typeof window !== \"undefined\") {\n      var expoCliStaticErrorElement = document.getElementById(\"_expo-static-error\");\n      if (expoCliStaticErrorElement === null || expoCliStaticErrorElement === void 0 ? void 0 : expoCliStaticErrorElement.textContent) {\n        var raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return _objectSpread(_objectSpread({}, raw), {}, {\n          logs: raw.logs.map(function (raw) {\n            return new LogBoxLog_1.LogBoxLog(raw);\n          })\n        });\n      }\n    }\n    throw new Error(\"useLogs must be used within a LogProvider\");\n  }\n  return logs;\n}\nexports.useLogs = useLogs;\nfunction useSelectedLog() {\n  var _useLogs = useLogs(),\n    selectedLogIndex = _useLogs.selectedLogIndex,\n    logs = _useLogs.logs;\n  return logs[selectedLogIndex];\n}\nexports.useSelectedLog = useSelectedLog;","map":{"version":3,"names":["react_1","__importDefault","require","react_native_1","LogBoxLog_1","exports","LogContext","default","createContext","useLogs","logs","useContext","Platform","OS","window","expoCliStaticErrorElement","document","getElementById","textContent","raw","JSON","parse","_objectSpread","map","LogBoxLog","Error","useSelectedLog","_useLogs","selectedLogIndex"],"sources":["/Users/sgrieve/Documents/GitHub/Habitful/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogContext.tsx"],"sourcesContent":["import React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { LogBoxLog } from \"./LogBoxLog\";\n\n// Context provider for Array<LogBoxLog>\n\nexport const LogContext = React.createContext<{\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} | null>(null);\n\nexport function useLogs(): {\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} {\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    if (Platform.OS === \"web\" && typeof window !== \"undefined\") {\n      // Logbox data that is pre-fetched on the dev server and rendered here.\n      const expoCliStaticErrorElement =\n        document.getElementById(\"_expo-static-error\");\n      if (expoCliStaticErrorElement?.textContent) {\n        const raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return {\n          ...raw,\n          logs: raw.logs.map((raw: any) => new LogBoxLog(raw)),\n        };\n      }\n    }\n\n    throw new Error(\"useLogs must be used within a LogProvider\");\n  }\n  return logs;\n}\n\nexport function useSelectedLog() {\n  const { selectedLogIndex, logs } = useLogs();\n  return logs[selectedLogIndex];\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAA0B,IAAAC,cAAA,GAAAD,OAAA;AAG1B,IAAAE,WAAA,GAAAF,OAAA;AAIaG,OAAA,CAAAC,UAAU,GAAGN,OAAA,CAAAO,OAAK,CAACC,aAAa,CAInC,IAAI,CAAC;AAEf,SAAgBC,OAAOA,CAAA;EAKrB,IAAMC,IAAI,GAAGV,OAAA,CAAAO,OAAK,CAACI,UAAU,CAACN,OAAA,CAAAC,UAAU,CAAC;EACzC,IAAI,CAACI,IAAI,EAAE;IACT,IAAIP,cAAA,CAAAS,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAE1D,IAAMC,yBAAyB,GAC7BC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MAC/C,IAAIF,yBAAyB,aAAzBA,yBAAyB,uBAAzBA,yBAAyB,CAAEG,WAAW,EAAE;QAC1C,IAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACN,yBAAyB,CAACG,WAAW,CAAC;QAC7D,OAAAI,aAAA,CAAAA,aAAA,KACKH,GAAG;UACNT,IAAI,EAAES,GAAG,CAACT,IAAI,CAACa,GAAG,CAAC,UAACJ,GAAQ;YAAA,OAAK,IAAIf,WAAA,CAAAoB,SAAS,CAACL,GAAG,CAAC;UAAA;QAAC;;;IAK1D,MAAM,IAAIM,KAAK,CAAC,2CAA2C,CAAC;;EAE9D,OAAOf,IAAI;AACb;AAvBAL,OAAA,CAAAI,OAAA,GAAAA,OAAA;AAyBA,SAAgBiB,cAAcA,CAAA;EAC5B,IAAAC,QAAA,GAAmClB,OAAO,EAAE;IAApCmB,gBAAgB,GAAAD,QAAA,CAAhBC,gBAAgB;IAAElB,IAAI,GAAAiB,QAAA,CAAJjB,IAAI;EAC9B,OAAOA,IAAI,CAACkB,gBAAgB,CAAC;AAC/B;AAHAvB,OAAA,CAAAqB,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}